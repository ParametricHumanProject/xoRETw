# (c) Mark Strembeck

package provide xoRET::GUI::Edit 0.1
package require Tkspline
package require Tcldot

Class xoRET_GUI::Edit

xoRET_GUI::Edit instproc init args {
  my instvar top pm treeobj obj
  set pm [lindex $args 0]; set obj [lindex $args 1]; set treeobj [lindex $args 2]
  set top [toplevel .[[self class] autoname edit%07d] -relief raised -borderwidth 2]
  wm protocol $top WM_DELETE_WINDOW "[self] destroy"
  next 
}

xoRET_GUI::Edit instproc destroy args {
  my instvar top
  destroy $top
  next
}

Class xoRET_GUI::Edit::RRA -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::RRA instproc init args {
 next
  my instvar top pm obj leftlistbox upperrightlistbox upperrighttitleframe \
     lowerrightlistbox lowerrighttitleframe

  # left frame
  set ltf [TitleFrame $top.ltf -text "Available Roles" -ipad 5]
  set f  [$ltf getframe] 
  set sw [ScrolledWindow $f.sw]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 20 \
		       -highlightthickness 0 \
		       -background white \
		       -selectmode single \
		       -multicolumn false]      
  foreach r [lsort -dictionary [$pm getRoleList]] {
    $leftlistbox insert end [$r name] \
	-text "[$r name]" \
	-image [Bitmap::get facemask] 
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes

  # right frame
  set rtopf [frame $top.rtopf]
  set upperrighttitleframe [TitleFrame $rtopf.tf2 -text "Direct Junior-Roles" -ipad 5]
  set f [$upperrighttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set upperrightlistbox [ListBox::create $sw.lb -height 10 -width 20 \
			     -highlightthickness 0 \
			     -background white \
			     -selectmode single \
			     -multicolumn false]
  set djr [$obj getDirectJuniorRoles]
  if {$djr != ""} {
    foreach r [lsort -dictionary $djr] {
      $upperrightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -image [Bitmap::get facemask] 
    }
  }
  $sw setwidget $upperrightlistbox
  pack $sw -fill both -expand yes

  set lowerrighttitleframe [TitleFrame $rtopf.tf3 -text "Inherited Junior-Roles" -ipad 5]
  set f [$lowerrighttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set lowerrightlistbox [ListBox::create $sw.lb -height 10 -width 20 \
			     -highlightthickness 0 \
			     -background white \
			     -selectmode none \
			     -multicolumn false]
  set tjr [$obj getTransitiveJuniorRoles]
  if {$tjr != ""} {
    foreach r [lsort -dictionary $tjr] {
      $lowerrightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask] 
    }
  }
  $sw setwidget $lowerrightlistbox
  pack $sw -fill both -expand yes

  pack $lowerrighttitleframe $upperrighttitleframe -side bottom -fill both -expand yes

  my instvar radiovar assignbutton revokebutton
  # button frame
  # the object-namespace is needed to access the radiovar variable
  my requireNamespace
  set radiovar junior
  
  set bf  [TitleFrame $top.bf -text "Options"]
  set f [$bf getframe]
  set assignbutton  [Button $f.assignbutton -text "Assign Junior" -width 12 \
			 -command "[self] assignJunior"]
  set revokebutton  [Button $f.revokebutton -text "Revoke Junior" -width 12 \
			 -command "[self] revokeJunior"]
  set sep1 [Separator  $f.sep1 -orient horizontal]
  set sep2 [Separator  $f.sep2 -orient horizontal]
  set close [Button $f.close -text "Close" -width 14 \
	      -command "[self] destroy"]
  pack $close -side bottom -pady 4
  pack $sep1 -side bottom -fill x -pady 15
  set placeholder [frame $f.ph -height 60]
  set blf [LabelFrame $f.lf -text "" -side top \
	      -relief sunken -borderwidth 1]
  set f [$blf getframe]
  set rbj [radiobutton $f.rbj -text "Assign Junior-Roles" \
	       -variable [self]::radiovar -value "junior" \
	       -command "[self] changeType" ]
  pack $rbj -anchor w
  set rbs [radiobutton $f.rbs -text "Assign Senior-Roles" \
	       -variable [self]::radiovar -value "senior" \
	       -command "[self] changeType"]
  pack $rbs -anchor w
  # pack button frame
  pack $blf $sep2 -side bottom 
  pack $sep2 -fill x 
  pack $placeholder $revokebutton $assignbutton -side bottom -pady 15
  # pack toplevel-frame
  pack $ltf $bf $rtopf -side left -fill both -padx 1 -pady 3 -expand yes

  wm minsize $top 650 400
  wm withdraw $top
  wm title $top "Role-to-Role Assignment for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 650x400+330+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::RRA instproc assignJunior {} {
  my instvar pm obj leftlistbox upperrightlistbox lowerrightlistbox
  set role [$obj name]
  set junior [$leftlistbox selection get]
  set success [$pm addJuniorRoleRelation $role $junior]
  if {$success} {
    $upperrightlistbox insert end $junior \
	-text "$junior" \
	-image [Bitmap::get facemask] 
  }
  $lowerrightlistbox delete [$lowerrightlistbox items]
  set tjr [$obj getTransitiveJuniorRoles]
  if {$tjr != ""} {
    foreach r [lsort -dictionary $tjr] {
      $lowerrightlistbox insert end [$r name] \
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask]
    }
  }
  update idletasks
}

xoRET_GUI::Edit::RRA instproc revokeJunior {} {
  my instvar pm obj upperrightlistbox lowerrightlistbox
  set role [$obj name]
  set junior [$upperrightlistbox selection get]
  set success [$pm removeJuniorRoleRelation $role $junior]
  if {$success} {
    $upperrightlistbox delete $junior    
  }
  $lowerrightlistbox delete [$lowerrightlistbox items]
  set tjr [$obj getTransitiveJuniorRoles]
  if {$tjr != ""} {
    foreach r [lsort -dictionary $tjr] {
      $lowerrightlistbox insert end [$r name] \
	    -text "[$r name]" \
	    -image [Bitmap::get facemask]
    }
  }
  update idletasks
}

xoRET_GUI::Edit::RRA instproc assignSenior {} {
  my instvar pm obj leftlistbox upperrightlistbox lowerrightlistbox
  set role [$obj name]
  set senior [$leftlistbox selection get]
  set success [$pm addSeniorRoleRelation $role $senior]
  if {$success} {
    $upperrightlistbox insert end $senior \
	-text "$senior" \
	-image [Bitmap::get facemask]
  }
  $lowerrightlistbox delete [$lowerrightlistbox items]
  set tsr [$obj getTransitiveSeniorRoles]
  if {$tsr != ""} {
    foreach r [lsort -dictionary $tsr] {
      $lowerrightlistbox insert end [$r name] \
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask]
    }
  }
  update idletasks
}

xoRET_GUI::Edit::RRA instproc revokeSenior {} {
  my instvar pm obj upperrightlistbox lowerrightlistbox
  set role [$obj name]
  set senior [$upperrightlistbox selection get]
  set success [$pm removeSeniorRoleRelation $role $senior]
  if {$success} {
    $upperrightlistbox delete $senior
  }
  $lowerrightlistbox delete [$lowerrightlistbox items]
  set tsr [$obj getTransitiveSeniorRoles]
  if {$tsr != ""} {
    foreach r [lsort -dictionary $tsr] {
      $lowerrightlistbox insert end [$r name] \
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask]
    }
  }
  update idletasks
}

xoRET_GUI::Edit::RRA instproc changeType {} {
  my instvar obj upperrightlistbox upperrighttitleframe \
      lowerrighttitleframe lowerrightlistbox radiovar assignbutton revokebutton
  if {$radiovar == "junior"} {
    $upperrighttitleframe configure -text "Direct Junior-Roles"
    $upperrightlistbox delete [$upperrightlistbox items]
    set djr [$obj getDirectJuniorRoles]
    if {$djr != ""} {
      foreach r [lsort -dictionary $djr] {
	$upperrightlistbox insert end [$r name]\
	    -text "[$r name]" \
	    -image [Bitmap::get facemask] 
      }
    }
    $lowerrighttitleframe configure -text "Inherited Junior-Roles"
    $lowerrightlistbox delete [$lowerrightlistbox items]
    set tjr [$obj getTransitiveJuniorRoles]
    if {$tjr != ""} {
      foreach r [lsort -dictionary $tjr] {
	$lowerrightlistbox insert end [$r name]\
	    -text "[$r name]" \
	    -fill gray60 \
	    -image [Bitmap::get facemask]
      }
    }
    $assignbutton configure -command "[self] assignJunior" -text "Assign Junior"
    $revokebutton configure -command "[self] revokeJunior" -text "Revoke Junior"
  } elseif {$radiovar == "senior"} {
    $upperrighttitleframe configure -text "Direct Senior-Roles"
    $upperrightlistbox delete [$upperrightlistbox items]
    set dsr [$obj info subclass]
    if {$dsr != ""} {
      foreach r [lsort -dictionary $dsr] {
	$upperrightlistbox insert end [$r name]\
	    -text "[$r name]" \
	    -image [Bitmap::get facemask] 
      }
    }
    $lowerrighttitleframe configure -text "Transitive Senior-Roles"
    $lowerrightlistbox delete [$lowerrightlistbox items]
    set tsr [$obj getTransitiveSeniorRoles]
    if {$tsr != ""} {
      foreach r [lsort -dictionary $tsr] {
	$lowerrightlistbox insert end [$r name]\
	    -text "[$r name]" \
	    -fill gray60 \
	    -image [Bitmap::get facemask]
      }
    }
    $assignbutton configure -command "[self] assignSenior" -text "Assign Senior"
    $revokebutton configure -command "[self] revokeSenior" -text "Revoke Senior"
  }
}

Class xoRET_GUI::Edit::PRA -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::PRA instproc init args {
  next
  my instvar top pm treeobj obj leftlistbox upperrightlistbox 
  # left frame
  set ltf [TitleFrame $top.ltf -text "Available Permissions" -ipad 5]
  set f  [$ltf getframe] 
  set sw [ScrolledWindow $f.sw]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 20 \
		       -highlightthickness 0 \
		       -background white \
		       -selectmode single \
		       -multicolumn false]      
  foreach p [lsort -dictionary [$pm getPermissionList]] {
    $leftlistbox insert end [$p name] \
	-text "[$p name]" \
	-image [Bitmap::get key] 
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes

  # right frame
  set rtopf [frame $top.rtopf]
  set upperrighttitleframe [TitleFrame $rtopf.tf2 -text "Directly Assigned Permissions" -ipad 5]
  set f [$upperrighttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set upperrightlistbox [ListBox::create $sw.lb -height 10 -width 20 \
			     -highlightthickness 0 \
			     -background white \
			     -selectmode single \
			     -multicolumn false]
  set dp [$obj getAllDirectlyAssignedPerms]
  if {$dp != ""} {
    foreach p [lsort -dictionary $dp] {
      $upperrightlistbox insert end [$p name]\
	  -text "[$p name]" \
	  -image [Bitmap::get key] 
    }
  }
  $sw setwidget $upperrightlistbox
  pack $sw -fill both -expand yes

  set lowerrighttitleframe [TitleFrame $rtopf.tf3 -text "Inherited Permissions" -ipad 5]
  set f [$lowerrighttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set lowerrightlistbox [ListBox::create $sw.lb -height 10 -width 20 \
			     -highlightthickness 0 \
			     -background white \
			     -selectmode none \
			     -multicolumn false]
  set tp [$obj getAllTransitivelyAssignedPerms]
  if {$tp != ""} {
    foreach p [lsort -dictionary $tp] {
      $lowerrightlistbox insert end [$p name]\
	  -text "[$p name]" \
	  -fill gray60 \
	  -image [Bitmap::get key] 
    }
  }
  $sw setwidget $lowerrightlistbox
  pack $sw -fill both -expand yes

  pack $lowerrighttitleframe $upperrighttitleframe -side bottom -fill both -expand yes

  # button frame
  set bf  [TitleFrame $top.bf -text "Options"]
  set f [$bf getframe]
  set assignbutton  [Button $f.assignbutton -text "Assign Permission" -width 14 \
			 -command "[self] assignPermission"]
  set revokebutton  [Button $f.revokebutton -text "Revoke Permission" -width 14 \
			 -command "[self] revokePermission"]
  set placeholder [frame $f.ph -height 140]
  set sep [Separator  $f.sep -orient horizontal]
  set close [Button $f.close -text "Close" -width 14 -command "$treeobj redrawTree; [self] destroy"]
  pack $close -side bottom -pady 4
  pack $sep -side bottom -fill x -pady 5
  pack $placeholder $revokebutton $assignbutton -side bottom -pady 15

  # window bottom
  pack $ltf $bf $rtopf -side left -fill both -padx 1 -pady 3 -expand yes

  wm minsize $top 650 400
  wm withdraw $top
  wm title $top "Permission-to-Role Assignment for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 650x400+330+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::PRA instproc assignPermission {} {
  my instvar pm obj leftlistbox upperrightlistbox
  set role [$obj name]
  set perm [$leftlistbox selection get]
  set success [$pm permRoleAssign $perm $role]
  if {$success} {
    $upperrightlistbox insert end $perm \
	-text "$perm" \
	-image [Bitmap::get key]
    update idletasks
  }
}

xoRET_GUI::Edit::PRA instproc revokePermission {} {
  my instvar rm obj leftlistbox upperrightlistbox
  set role [$obj name]
  set perm [$upperrightlistbox selection get]
  set success [$pm permRoleRevoke $perm $role]
  if {$success} {
    $upperrightlistbox delete $perm
    update idletasks
  }
}

# Class xoRET_GUI::Edit::Scenario -superclass xoRET_GUI::Edit

# xoRET_GUI::Edit::Scenario instproc init args {
#   next
#   [self] instvar pm top leftlistbox graph c nameentry authentry obj
#   set graph [dotnew digraph]
#   $graph setedgeattributes label ""
  
#   set topmostframe [TitleFrame $top.topmost -text "New Scenario" -ipad 5]
  
#   # paned window
#   set f [$topmostframe getframe]
#   set pw    [PanedWindow $f.pw -side top]
#   set pane  [$pw add -minsize 350]
 
#   # left frame
#   set upperleftframe [TitleFrame $pane.upper -text "Attributes" -ipad 5]
#   set f [$upperleftframe getframe]

#   set lframe [frame $f.lframe]
#   set namelabel [Label $lframe.namel -text "Name:" -anchor w]
#   set authlabel [Label $lframe.authl -text "Author:" -anchor w]
#   pack $authlabel $namelabel -side bottom -expand yes
#   set eframe [frame $f.eframe]
#   set authentry [Entry $eframe.authe -text "[$obj author]" \
# 		     -width 35 -helptext "Enter author name here"\
# 		     -background white]
#   set nameentry [Entry $eframe.namee -text "[split [$obj name] _]" \
# 		     -width 35 -helptext "Enter scenario name here" \
# 		     -editable 0 -background white]
#   pack $authentry $nameentry -side bottom -expand yes -fill x
#   pack $lframe $eframe -side left -expand yes -fill both -padx 2 -pady 1
  
#   set midleftframe [TitleFrame $pane.mid -text "Currently Available Steps" -ipad 5]
#   set f [$midleftframe getframe]
#   set sw [ScrolledWindow $f.sw]
#   set leftlistbox [ListBox::create $sw.listbox -height 12 -width 8 \
# 			    -highlightthickness 0 \
# 			    -background white \
# 			    -selectmode single \
# 			    -multicolumn false]
#   foreach step [lsort -dictionary [$pm getStepList]] {
#     $leftlistbox insert end [$step name] \
# 	-text "[$step name]" \
# 	-image [Bitmap::get folder]
#   }
#   $sw setwidget $leftlistbox
#   pack $sw -fill both -expand yes

#   set lowerleftframe [TitleFrame $pane.lower -text "Options" -ipad 5]
#   set f [$lowerleftframe getframe]
#   set addframe [frame $f.add]
#   set addbutton [Button $addframe.add -text "Add selected step" -width 15 \
# 		     -height 1 -command "[self] addSelectedStep"]
#   set createbutton [Button $addframe.create -text "Create new step" -width 15 \
# 			-height 1 -command "[self] createNewStep"]
#   pack $addbutton $createbutton -side left -fill x -expand yes -padx 3
#   set layoutframe [frame $f.layout]
#   set layoutbutton [Button $layoutframe.layout -text "Layout scenario graph" -width 15 \
# 			-height 1 -command "[self] layout"]
#   set clearbutton [Button $layoutframe.clear -text "Clear graph" -width 15 \
# 		       -height 1 -command "[self] clear"]
#   pack $layoutbutton $clearbutton -side left -fill x -expand yes -padx 3
#   set saveframe [frame $f.save]
#   set savebutton [Button $saveframe.save -text "Save scenario" -width 15 \
# 		      -height 1 -command "[self] saveScenario"]
#   set cancelbutton [Button $saveframe.cancel -text "Cancel" -width 15 \
# 			-height 1 -command "[self] destroy"]
#   pack $savebutton $cancelbutton -side left -expand yes -fill x -padx 3
#   set sep1 [Separator $f.sep1 -orient horizontal]
#   set sep2 [Separator $f.sep2 -orient horizontal]
#   pack $saveframe $sep1 $layoutframe $sep2 $addframe -side bottom -fill x -expand yes -pady 1

#   pack $lowerleftframe $midleftframe $upperleftframe -side bottom -fill both -expand yes -padx 2 -pady 3

#   # right frame
#   set pane  [$pw add -minsize 550]
#   set righttitleframe [TitleFrame $pane.title -text "Scenario Description" -ipad 5]
#   set f [$righttitleframe getframe]
#   set canvasframe [frame $f.a]
#   set hscrollframe [frame $f.b]
#   set c [canvas $canvasframe.c -cursor crosshair \
# 	     -relief sunken \
# 	     -width 0 \
# 	     -background white \
# 	     -height 0 \
# 	     -borderwidth 0]
#   set hscroll [scrollbar $hscrollframe.hs -orient horiz -relief sunken -command "$c xview"]
#   set vscroll [scrollbar $canvasframe.vs -relief sunken -command "$c yview"]
#   $c configure -xscrollcommand "$hscroll set" -yscrollcommand "$vscroll set" 
#   pack $vscroll -side right -fill y
#   pack $hscroll -side left -expand yes -fill x 
#   pack $c -expand yes -fill both   
#   pack $canvasframe -expand yes -fill both
#   pack $hscrollframe -side bottom -fill x
  
#   pack $righttitleframe -fill both -expand yes

#   # pack top-level frame
#   pack $pw -fill both -expand yes -side bottom
#   pack $topmostframe -side left -fill both -expand yes

#   bind $c <ButtonPress-1> "[self] mouse_b1_press %x %y"
#   bind $c <B1-Motion> "[self] mouse_b1_motion %x %y"
#   bind $c <ButtonRelease-1> "[self] mouse_b1_release %x %y"
#   bind $c <ButtonPress-3> "[self] deleteGraphElement"

#   set dotfile "[pwd]/[string trimleft [self]-dot.dot :]"
#   $pm exportScenarioDotFile [$obj name] $dotfile
#   if {[catch {open $dotfile r} fid]} {
#     xoRET_GUI::Dialog::MsgDialog md "Unable to open dot file: $dotfile" warning Ok
#     return
#   }
#   if {[catch {dotread $fid} graph]} {
#     xoRET_GUI::Dialog::MsgDialog md "Invalid dot file: $dotfile" warning Ok
#     close $fid
#     return
#   }
#   close $fid
#   file delete $dotfile
#   $graph layout
#   eval [$graph render]
#   $c configure -scrollregion [$c bbox all]

#   wm minsize $top 900 520
# #  wm maxsize $top 1500 520
#   wm withdraw $top
#   wm title $top "Edit scenario $obj"
#   BWidget::place $top 0 0 center
#   wm geometry $top 900x520+430+320
#   wm deiconify $top
#   raise $top
#   focus -force $top
#   update idletasks
# }


# # create new edge in canvas
# xoRET_GUI::Edit::Scenario instproc mouse_b1_press {x y} {
#   [self] instvar c startobj
#   set startobj ""
#   set x [$c canvasx $x]
#   set y [$c canvasy $y]
#   foreach item [$c find overlapping $x $y $x $y] {
#     foreach tag [$c gettags $item] {
#       if {[string first "node" $tag] == 1} {
# 	set item [string range $tag 1 end]
# 	set startobj [$c create line $x $y $x $y \
# 			  -tag $item -fill red -arrow last]
#       }
#     }
#   }
# }

# # extend edge in canvas
# xoRET_GUI::Edit::Scenario instproc mouse_b1_motion {x y} {
#   [self] instvar c startobj
#   set pos [$c coords $startobj]
#   if {[$c type $startobj] == "line"} {
#     $c coords $startobj [lindex $pos 0] [lindex $pos 1] \
# 	[$c canvasx $x] [$c canvasy $y]
#   }
# }

# # complete edge construction.
# xoRET_GUI::Edit::Scenario instproc mouse_b1_release {x y} {
#   [self] instvar c startobj
#   set x [$c canvasx $x]
#   set y [$c canvasy $y]
#   set tail [lindex [$c gettags $startobj] 0]
#   foreach item [$c find overlapping $x $y $x $y] {
#     foreach tag [$c gettags $item] {
#       set head [string range $tag 1 end]
#       if {[string first "node" $head] == 0} {
# 	set e [$tail addedge $head]
# 	$c dtag $startobj $tail
# 	$c addtag 1$e withtag $startobj
# 	$c itemconfigure $startobj -fill black
# 	set modified 1
# 	set startobj {}
# 	return
#       }
#     }
#   }
#   # if we get here the edge is not terminating on a node
#   $c delete $startobj
#   set startobj {}
# }

# xoRET_GUI::Edit::Scenario instproc createNewStep {} {
#   [self] instvar pm treeobj
#   xoRET_GUI::Create::Step [Object autoname create%05d] $pm $treeobj [self]
# }

# xoRET_GUI::Edit::Scenario instproc deleteGraphElement {} {
#   [self] instvar c obj
#   set current [string range [lindex [$c gettags current] 0] 1 end]
#   set type [string range $current 0 3]
#   if {$type == "node"} {
#     xoRET_GUI::Dialog::ConfirmDialog cd "Remove step [$current showname] from scenario [$obj name] ?"\
# 	"[self] deleteElement $current"
#   } elseif {$type == "edge"} {
#     xoRET_GUI::Create::EdgeDialog [Object autoname edgedlg%05d] $current $c [self]
#   }
# }

# xoRET_GUI::Edit::Scenario instproc deleteElement {element} {
#   [self] instvar c
#   if {[string first "node" $element] == 0} {
#     foreach edge [$element listedges] {
#       $c delete 1$edge
#       $c delete 0$edge
#       $edge delete
#     }
#   }
#   $c delete 1$element
#   $c delete 0$element
#   $element delete
# }

# xoRET_GUI::Edit::Scenario instproc layout {} {
#   [self] instvar graph c
#   $c delete all
#   $graph layout
#   eval [$graph render]
#   $c configure -scrollregion [$c bbox all]
# }

# xoRET_GUI::Edit::Scenario instproc clear {} {
#   [self] instvar graph c
#   $c delete all
#   $graph delete
#   set graph [dotnew digraph]
# }

# xoRET_GUI::Edit::Scenario instproc update {} {
#   [self] instvar leftlistbox pm
#   $leftlistbox delete [$leftlistbox items]
#   foreach step [lsort -dictionary [$pm getStepList]] {
#     $leftlistbox insert end [$step name] \
# 	-text "[$step name]" \
# 	-image [Bitmap::get folder]
#   }
# }

# xoRET_GUI::Edit::Scenario instproc addSelectedStep {} {
#   [self] instvar pm leftlistbox graph c
#   set step [$leftlistbox selection get]
#   if {$step != ""} {
#     set node [$graph addnode $step label $step shape box]
#     $c addtag 1$node all
#     [self] layout
#   }
# }

# xoRET_GUI::Edit::Scenario instproc saveScenario {} {
#   [self] instvar graph nameentry authentry treeobj pm obj
#   set name [string trim [$nameentry cget -text]]
#   set auth [string trim [$authentry cget -text]]
#   if {$auth != ""} {
#     $pm clearScenario $name
#     $obj author $auth
#     # add all nodes/steps
#     foreach node [$graph listnodes] {
#       eval $pm addStepToScenario [split [$node showname] -] [list $name]
#     }
#     # now add the edges
#     foreach node [$graph listnodes] {
#       foreach edge [$node listoutedges] {
# 	set delimiter [expr [string first "->" [$edge showname]] + 2]
# 	set tail [string range [$edge showname] $delimiter end]
# #	set label ""
# 	set label [lindex [$edge queryattributevalues label] 1]
# 	eval $pm addEdgeToScenario [split [$node showname] -] [split $tail -] [list $name] [list $label]
#       }
#     }
#     $treeobj redrawTree
#     [self] destroy
#   } else {
#     xoRET_GUI::Dialog::MsgDialog md "You must enter an author in order to create\
#                                        a new scenario." info Ok
#   }
# }

Class xoRET_GUI::Edit::Objective -superclass ::xoRET_GUI::Edit

xoRET_GUI::Edit::Objective instproc init args {

  next  
  my instvar pm top treeobj listbox namee typecombo authore dcce obj
  set topmostframe [TitleFrame $top.topmost -text "Edit Control Objective" -ipad 5]
  set f [$topmostframe getframe]
  # left frame
  set leftframe [frame $f.left]
  # attribute/entry frame
  set eframe [TitleFrame $leftframe.eframe -text "Attributes" -ipad 5]
  set ef [$eframe getframe]
  set lframe [frame $ef.lframe]
  set namel [Label $lframe.actrl -text "Name:" -anchor e]
  set typel [Label $lframe.actnl -text "Type:" -anchor e]
  set authorl [Label $lframe.authl -text "Author:" -anchor e]
  pack $namel $typel $authorl -side top -padx 2 -pady 3 

  set entrfr [frame $ef.entrfr]
  set namee [Entry $entrfr.actre -text "[$obj name]" -width 35\
		 -helptext "Enter name of objective here" \
		 -background white\
		 -editable false]
  set typecombo [ComboBox $entrfr.combo -values "[::Objective getTypeList]" -text "[$obj type]" \
		     -helptext "Choose an objective-type" \
		     -editable false \
		     -width 36 \
		     -background white]
  set authore [Entry $entrfr.authe -text "[$obj author]" -width 35 -helptext "Enter author name here"\
		   -background white]
  pack $namee $typecombo $authore -side top -padx 2 -pady 3 -fill x
  # pack eframe
  pack $lframe $entrfr -side left -fill x -expand yes -padx 2 -pady 3

  # derived cc frame
  set dccf [TitleFrame $leftframe.dccf -text "Abstract Context Condition" -ipad 5]
  set df [$dccf getframe]
  set dccl [Label $df.dccl -text "Name of Abstract Context Condition:" -anchor w]
  set dcce [Entry $df.dcce -text "" -width 25 \
		-helptext "Enter name of abstract context condition here" \
		-background white]
  set dccadd [Button $df.dccb -text "Add Condition to List" -width 10 -command "[self] addCondition"]
  pack $dccl $dcce -side top -fill both -padx 2 -pady 3 
  pack $dccadd -side top -fill both -padx 2 -pady 5
  
  # bframe
  set bframe [TitleFrame $leftframe.bframe -text "Options" -ipad 5]
  set bf [$bframe getframe]
  set create [Button $bf.create -text "Save Objective" -height 1 -width 10\
			 -command "[self] save"]
  set cancel [Button $bf.cancel -text "Cancel" -height 1 -width 10 -command "[self] destroy"]
  pack $create $cancel -side left -expand yes -fill x -padx 2 -pady 3
  # pack left frame
  pack $bframe $dccf $eframe -side bottom -expand yes -fill both -padx 2 -pady 3
  
  # right frame
  set rightframe [TitleFrame $f.dccfl -text "List of Abstract Context Conditions" -ipad 5]
  set f [$rightframe getframe]
  set sw [ScrolledWindow $f.sw -relief sunken -borderwidth 1]
  set listbox [ListBox::create $sw.lb -height 10 -width 30\
		   -highlightthickness 0 \
		   -background white \
		   -selectmode single \
		   -multicolumn false]
  set conditions [$pm getDerivedConditionListOfObjective [$obj name]]
  if {$conditions != ""} {
    foreach cond $conditions {
      if {![$listbox exists $cond]} {
	$listbox insert end "[join $cond _]"\
	    -text "$cond" \
	    -image [Bitmap::get file]
      }
    }
  }
  $sw setwidget $listbox
  pack $sw -fill both -expand yes -pady 3
  set delete [Button $f.del -text "Remove Condition from List" -width 10 \
		  -command "[self] removeCondition"]
  pack $delete -fill x -pady 3
  
  # pack titleframe
  pack $leftframe -side left -fill both -padx 2 
  pack $rightframe -side left -fill both -padx 2 -pady 3
  
  # pack top-level frame
  pack $topmostframe -side left -fill both -expand yes

  wm minsize $top 650 370
  wm maxsize $top 650 370
  wm withdraw $top
  wm title $top "Edit control objective"
  BWidget::place $top 0 0 center
  wm geometry $top 650x370+430+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::Objective instproc addCondition {} {
  my instvar listbox dcce
  set condition [string trim [$dcce cget -text]]
  if {$condition != ""} {
    if {![$listbox exists $condition]} {
      $listbox insert end "[join $condition _]"\
	  -text "$condition" \
	  -image [Bitmap::get file]
      $dcce configure -text ""
      update idletasks
    }
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must enter a condition name before\
                                     it can be added to the list." info Ok
  }
}

xoRET_GUI::Edit::Objective instproc removeCondition {} {
  my instvar listbox
  set condition [$listbox selection get]
  if {$condition != ""} {
    if {[$listbox exists $condition]} {
      $listbox delete $condition
      update idletasks
    }
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You first have to choose a condition the list." info Ok
  }
} 

xoRET_GUI::Edit::Objective instproc save {} {
  my instvar pm listbox authore namee typecombo treeobj obj
  set name [string trim [$namee cget -text]]
  set type [string trim [$typecombo cget -text]]
  set author [string trim [$authore cget -text]]
  if {($name != "") && ($type != "") && ($author != "")} {
    $obj name "$name"
    $obj author "$author"
    $pm clearDerivedConditionListOfObjective "$name"
    set conditions [$listbox items]
    if {$conditions != ""} {
      foreach cond $conditions {
	$pm addDerivedAbstractContextConditionToObjective "[split $cond _]" "$name"
      }
    }
    $treeobj redrawTree
    my destroy
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must enter a name, a type, and an author\
                                     in order to save a control objective." info Ok
  }
}

Class xoRET_GUI::Edit::Obstacle -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::Obstacle instproc init args {
  next
  my instvar pm top treeobj listbox namee typecombo authore dcce obj
#  set pm [lindex $args 0]; set obj [lindex $args 1]; set treeobj [lindex $args 2]

  set topmostframe [TitleFrame $top.topmost -text "Edit Obstacle" -ipad 5]
  set f [$topmostframe getframe]
  # left frame
  set leftframe [frame $f.left]
  # attribute/entry frame
  set eframe [TitleFrame $leftframe.eframe -text "Attributes" -ipad 5]
  set ef [$eframe getframe]
  set lframe [frame $ef.lframe]
  set namel [Label $lframe.actrl -text "Name:" -anchor e]
  set typel [Label $lframe.actnl -text "Type:" -anchor e]
  set authorl [Label $lframe.authl -text "Author:" -anchor e]
  pack $namel $typel $authorl -side top -padx 2 -pady 3 

  set entrfr [frame $ef.entrfr]
  set namee [Entry $entrfr.actre -text "[$obj name]" -width 35\
		 -helptext "Enter name of obstacle here" \
		 -background white\
		 -editable false]
  set typecombo [ComboBox $entrfr.combo -values "[::Obstacle getTypeList]" -text "[$obj type]" \
		     -helptext "Choose an obstacle-type" \
		     -editable false \
		     -width 36 \
		     -background white]
  set authore [Entry $entrfr.authe -text "[$obj author]" -width 35 -helptext "Enter author name here"\
		   -background white]
  pack $namee $typecombo $authore -side top -padx 2 -pady 3 -fill x
  # pack eframe
  pack $lframe $entrfr -side left -fill x -expand yes -padx 2 -pady 3

  # derived cc frame
  set dccf [TitleFrame $leftframe.dccf -text "Abstract Context Condition" -ipad 5]
  set df [$dccf getframe]
  set dccl [Label $df.dccl -text "Name of Abstract Context Condition:" -anchor w]
  set dcce [Entry $df.dcce -text "" -width 25 \
		-helptext "Enter name of abstract context condition here" \
		-background white]
  set dccadd [Button $df.dccb -text "Add Condition to List" -width 10 -command "[self] addCondition"]
  pack $dccl $dcce -side top -fill both -padx 2 -pady 3 
  pack $dccadd -side top -fill both -padx 2 -pady 5
  
  # bframe
  set bframe [TitleFrame $leftframe.bframe -text "Options" -ipad 5]
  set bf [$bframe getframe]
  set create [Button $bf.create -text "Save Obstacle" -height 1 -width 10\
			 -command "[self] save"]
  set cancel [Button $bf.cancel -text "Cancel" -height 1 -width 10 -command "[self] destroy"]
  pack $create $cancel -side left -expand yes -fill x -padx 2 -pady 3
  # pack left frame
  pack $bframe $dccf $eframe -side bottom -expand yes -fill both -padx 2 -pady 3
  
  # right frame
  set rightframe [TitleFrame $f.dccfl -text "List of Abstract Context Conditions" -ipad 5]
  set f [$rightframe getframe]
  set sw [ScrolledWindow $f.sw -relief sunken -borderwidth 1]
  set listbox [ListBox::create $sw.lb -height 10 -width 30\
		   -highlightthickness 0 \
		   -background white \
		   -selectmode single \
		   -multicolumn false]
  set conditions [$pm getDerivedConditionListOfObstacle [$obj name]]
  if {$conditions != ""} {
    foreach cond $conditions {
      if {![$listbox exists $cond]} {
	$listbox insert end "[join $cond _]"\
	    -text "$cond" \
	    -image [Bitmap::get file]
      }
    }
  }
  $sw setwidget $listbox
  pack $sw -fill both -expand yes -pady 3
  set delete [Button $f.del -text "Remove Condition from List" -width 10 \
		  -command "[self] removeCondition"]
  pack $delete -fill x -pady 3
  
  # pack titleframe
  pack $leftframe -side left -fill both -padx 2 
  pack $rightframe -side left -fill both -padx 2 -pady 3
  
  # pack top-level frame
  pack $topmostframe -side left -fill both -expand yes

  wm minsize $top 650 370
  wm maxsize $top 650 370
  wm withdraw $top
  wm title $top "Edit obstacle"
  BWidget::place $top 0 0 center
  wm geometry $top 650x370+430+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::Obstacle instproc addCondition {} {
  my instvar listbox dcce
  set condition [string trim [$dcce cget -text]]
  if {$condition != ""} {
    if {![$listbox exists $condition]} {
      $listbox insert end "[join $condition _]"\
	  -text "$condition" \
	  -image [Bitmap::get file]
      $dcce configure -text ""
      update idletasks
    }
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must enter a condition name before\
                                     it can be added to the list." info Ok
  }
}

xoRET_GUI::Edit::Obstacle instproc removeCondition {} {
  my instvar listbox
  set condition [$listbox selection get]
  if {$condition != ""} {
    if {[$listbox exists $condition]} {
      $listbox delete $condition
      update idletasks
    }
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You first have to choose a condition the list." info Ok
  }
} 

xoRET_GUI::Edit::Obstacle instproc save {} {
  my instvar pm listbox authore namee typecombo treeobj obj
  set name [string trim [$namee cget -text]]
  set type [string trim [$typecombo cget -text]]
  set author [string trim [$authore cget -text]]
  if {($name != "") && ($type != "") && ($author != "")} {
    $obj name "$name"
    $obj author "$author"
    $pm clearDerivedConditionListOfObstacle "$name"
    set conditions [$listbox items]
    if {$conditions != ""} {
      foreach cond $conditions {
	$pm addDerivedAbstractContextConditionToObstacle "[split $cond _]" "$name"
      }
    }
    $treeobj redrawTree
    my destroy
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must enter a name, a type, and an author\
                                     in order to save a obstacle." info Ok
  }
}

Class xoRET_GUI::Edit::Step -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::Step instproc init args {
  next
  my instvar pm top referrer treeobj actore actione targete authore obj
#  set pm [lindex $args 0]; set obj [lindex $args 1]
#  set treeobj [lindex $args 2]; 
  set referrer [lindex $args 3]
  set topmostframe [TitleFrame $top.topmost -text "Edit Step" -ipad 5]
  
  set f [$topmostframe getframe]
  # eframe
  set eframe [frame $f.eframe]
  set lframe [frame $eframe.lframe]
  set actorl [Label $lframe.actrl -text "Actor:" -anchor w]
  set actionl [Label $lframe.actnl -text "Action:" -anchor w]
  set targetl [Label $lframe.tgtl -text "Target:" -anchor w]
  set authorl [Label $lframe.authl -text "Author:" -anchor w]
  pack $actorl $actionl $targetl $authorl -side top -padx 2 -pady 3

  set entrfr [frame $eframe.entrfr]
  set actore [Entry $entrfr.actre -text "[$obj actor]" -width 25 \
		  -helptext "Enter actor name here"]
  set actione [Entry $entrfr.actne -text "[$obj action]"\
		   -width 25 -helptext "Enter action description here"]
  set targete [Entry $entrfr.tgte -text "[$obj target]" -width 25 -helptext "Enter target name here"]
  set authore [Entry $entrfr.authe -text "[$obj author]" -width 25 -helptext "Enter author name here"]
  pack $authore $targete $actione $actore -side bottom -padx 2 -pady 3 -expand yes -fill x
  # pack eframe
  pack $lframe $entrfr -side left -fill both -expand yes -padx 2 -pady 3

  # bframe
  set bframe [frame $f.bframe]
  set create [Button $bframe.create -text "Save Step" -height 1 -width 10 -command "[self] save"]
  set cancel [Button $bframe.cancel -text "Cancel" -height 1 -width 10 -command "[self] destroy"]
  pack $create $cancel -side left -expand yes -fill x -padx 2 -pady 3

  # pack titleframe
  set sep [Separator  $f.sep -orient horizontal]
  pack $bframe -side bottom -expand yes -fill both -padx 2 -pady 3
  pack $sep -side bottom -fill x
  pack $eframe -side bottom -expand yes -fill both -padx 2 -pady 3
  
  # pack top-level frame
  pack $topmostframe -side left -fill both -expand yes

  wm minsize $top 300 200
  wm maxsize $top 300 200
  wm withdraw $top
  wm title $top "Edit scenario step"
  BWidget::place $top 0 0 center
  wm geometry $top 300x200+430+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::Step instproc save {} {
  my instvar pm referrer treeobj actore actione targete authore obj
  set actor [string trim [$actore cget -text]]
  set action [string trim [$actione cget -text]]
  set target [string trim [$targete cget -text]]
  set author [string trim [$authore cget -text]]
  if {($actor != "") && ($action != "") && ($target != "") && ($author != "")} {
    $obj actor $actor; $obj action $action
    $obj target $target; $obj author $author
    $treeobj redrawTree
    if {$referrer != ""} {
      $referrer update
    }
    my destroy
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must enter an actor, an action, a target, \
                                     and an author in order to save a step." info Ok
  }
}

Class xoRET_GUI::Edit::Task -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::Task instproc init args {
  next
  my instvar pm top treeobj leftlistbox rightlistbox namee authore obj
  set pm [lindex $args 0]; set obj [lindex $args 1]; set treeobj [lindex $args 2]
  
  set upperframe [frame $top.upper]
  # upper left frame
  set upperleftframe [frame $upperframe.leftf]
  # attribute frame
  set attframe [TitleFrame $upperleftframe.attf -text "Attributes" -ipad 5]
  set af [$attframe getframe]
  set lframe [frame $af.lframe]
  set namel [Label $lframe.actrl -text "Name:" -anchor e]
  set authorl [Label $lframe.authl -text "Author:" -anchor e]
  pack $namel $authorl -side top -padx 2 -pady 3 

  set eframe [frame $af.eframe]
  set namee [Entry $eframe.actre -text "[$obj name]" -width 35\
		 -helptext "Enter task name here" \
		 -background white -editable false]
  set authore [Entry $eframe.authe -text "[$obj author]" -width 35\
		   -helptext "Enter author name here"\
		   -background white]
  pack $namee $authore -side top -padx 2 -pady 3 -fill x
  # pack attframe
  pack $lframe $eframe -side left -padx 2 -pady 3 -fill x
  # attached scenario list frame
  set tsframe [TitleFrame $upperleftframe.tsf -text "Attached Scenarios" -ipad 5]
  set tsf [$tsframe getframe]
  set sw [ScrolledWindow $tsf.sw -relief sunken -borderwidth 1]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 25\
		   -highlightthickness 0 \
		   -background white \
		   -selectmode single \
		   -multicolumn false]
  set scenarios [$pm getScenarioListOfTask [$obj name]]
  if {$scenarios != ""} {
    foreach s $scenarios {
      if {![$leftlistbox exists [$s name]]} {
	$leftlistbox insert end [$s name]\
	    -text "[$s name]"\
	    -image [Bitmap::get film]
      }
    }
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes -pady 3
  set delete [Button $tsf.del -text "Remove Scenario from Task" -width 10 \
		  -command "[self] removeScenario"]
  pack $delete -fill x -pady 3
  # pack upper left frame
  pack $attframe -side top -padx 2 -pady 3 -fill x
  pack $tsframe -side top -padx 2 -pady 3 -fill both

  # upper right frame
  set upperrightframe [TitleFrame $upperframe.rightf -text "Currently Available Scenarios" -ipad 5]
  set urf [$upperrightframe getframe]
  set sw [ScrolledWindow $urf.sw -relief sunken -borderwidth 1]
  set rightlistbox [ListBox::create $sw.lb -height 10 -width 45\
		   -highlightthickness 0 \
		   -background white \
		   -selectmode single \
		   -multicolumn false]
  set scenarios [$pm getScenarioList]
  if {$scenarios != ""} {
    foreach s $scenarios {
      $rightlistbox insert end [$s name] \
	  -text "[$s name]" \
	  -image [Bitmap::get film]
    }
  }
  $sw setwidget $rightlistbox
  pack $sw -fill both -expand yes -pady 3
  set add [Button $urf.del -text "Add Scenario to Task" -width 10 \
		  -command "[self] addScenario"]
  pack $add -fill x -pady 3
  # pack upper frame
  pack $upperleftframe -side left -padx 2 
  pack $upperrightframe -side left -padx 2 -pady 3 -fill both

  # lower frame
  set lowerframe [TitleFrame $top.lowerf -text "Options" -ipad 5]
  set lf [$lowerframe getframe]
  set create [Button $lf.create -text "Save Task" -height 1 -width 10\
			 -command "[self] save"]
  set cancel [Button $lf.cancel -text "Cancel" -height 1 -width 10 -command "[self] destroy"]
  pack $create $cancel -side left -expand yes -fill x -padx 2 -pady 3

  # pack top-level frame
  pack $upperframe $lowerframe -side top -padx 2 -pady 3 -fill both

  wm minsize $top 685 430
  wm maxsize $top 685 430
  wm withdraw $top
  wm title $top "Edit task"
  BWidget::place $top 0 0 center
  wm geometry $top 685x430+430+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::Task instproc addScenario {} {
  my instvar leftlistbox rightlistbox
  set scenario [$rightlistbox selection get]
  if {$scenario != ""} {
    if {![$leftlistbox exists $scenario]} {
      $leftlistbox insert end $scenario \
	  -text "$scenario" \
	  -image [Bitmap::get film]
    }
    update idletasks
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You have to choose a scenario first." info Ok
  }
}

xoRET_GUI::Edit::Task instproc removeScenario {} {
  my instvar leftlistbox 
  set scenario [$leftlistbox selection get]
  if {$scenario != ""} {
    if {[$leftlistbox exists $scenario]} {
      $leftlistbox delete $scenario
    }
    update idletasks
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You have to choose a scenario first." info Ok
  }
}

xoRET_GUI::Edit::Task instproc save {} {
  my instvar leftlistbox pm treeobj namee authore obj
  set name [string trim [$namee cget -text]]
  set author [string trim [$authore cget -text]]
  if {($name != "") && ($author != "")} {
    $obj author $author
    $pm clearScenarioListOfTask "$name"
    set scenarios [$leftlistbox items]
    if {$scenarios != ""} {
      foreach s $scenarios {
	$pm addScenarioToTask "$s" "$name"
      }
    }
    $treeobj redrawTree
    my destroy
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must enter a name, and an author in\
                                     order to save a task." info Ok
  }
}

Class xoRET_GUI::Edit::Profile -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::Profile instproc init args {
  next
  my instvar pm top treeobj leftlistbox rightlistbox namee authore 
  set pm [lindex $args 0]; set obj [lindex $args 1]; set treeobj [lindex $args 2]
  
  set upperframe [frame $top.upper]
  # upper left frame
  set upperleftframe [frame $upperframe.leftf]
  # attribute frame
  set attframe [TitleFrame $upperleftframe.attf -text "Attributes" -ipad 5]
  set af [$attframe getframe]
  set lframe [frame $af.lframe]
  set namel [Label $lframe.actrl -text "Name:" -anchor e]
  set authorl [Label $lframe.authl -text "Author:" -anchor e]
  pack $namel $authorl -side top -padx 2 -pady 3 

  set eframe [frame $af.eframe]
  set namee [Entry $eframe.actre -text "[$obj name]" -width 35\
		 -helptext "Enter name of work profile here" \
		 -background white -editable false]
  set authore [Entry $eframe.authe -text "[$obj author]" -width 35 -helptext "Enter author name here"\
		   -background white]
  pack $namee $authore -side top -padx 2 -pady 3 -fill x
  # pack attframe
  pack $lframe $eframe -side left -padx 2 -pady 3 -fill x
  # attached scenario list frame
  set tsframe [TitleFrame $upperleftframe.tsf -text "Attached Tasks" -ipad 5]
  set tsf [$tsframe getframe]
  set sw [ScrolledWindow $tsf.sw -relief sunken -borderwidth 1]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 25\
		   -highlightthickness 0 \
		   -background white \
		   -selectmode single \
		   -multicolumn false]
  set tasks [$pm getTaskListOfWorkProfile [$obj name]]
  if {$tasks != ""} {
    foreach t $tasks {
      if {![$leftlistbox exists [$t name]]} {
	$leftlistbox insert end [$t name] \
	    -text "[$t name]" \
	    -image [Bitmap::get task]
      }
    }
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes -pady 3
  set delete [Button $tsf.del -text "Remove Task from Profile" -width 10 \
		  -command "[self] removeTask"]
  pack $delete -fill x -pady 3
  # pack upper left frame
  pack $attframe -side top -padx 2 -pady 3 -fill x
  pack $tsframe -side top -padx 2 -pady 3 -fill both

  # upper right frame
  set upperrightframe [TitleFrame $upperframe.rightf -text "Currently Available Tasks" -ipad 5]
  set urf [$upperrightframe getframe]
  set sw [ScrolledWindow $urf.sw -relief sunken -borderwidth 1]
  set rightlistbox [ListBox::create $sw.lb -height 10 -width 45\
		   -highlightthickness 0 \
		   -background white \
		   -selectmode single \
		   -multicolumn false]
  set tasks [$pm getTaskList]
  if {$tasks != ""} {
    foreach t $tasks {
      $rightlistbox insert end [$t name] \
	  -text "[$t name]" \
	  -image [Bitmap::get task]
    }
  }
  $sw setwidget $rightlistbox
  pack $sw -fill both -expand yes -pady 3
  set add [Button $urf.del -text "Add Task to Profile" -width 10 \
		  -command "[self] addTask"]
  pack $add -fill x -pady 3
  # pack upper frame
  pack $upperleftframe -side left -padx 2 
  pack $upperrightframe -side left -padx 2 -pady 3 -fill both

  # lower frame
  set lowerframe [TitleFrame $top.lowerf -text "Options" -ipad 5]
  set lf [$lowerframe getframe]
  set create [Button $lf.create -text "Save Profile" -height 1 -width 10\
			 -command "[self] save"]
  set cancel [Button $lf.cancel -text "Cancel" -height 1 -width 10 -command "[self] destroy"]
  pack $create $cancel -side left -expand yes -fill x -padx 2 -pady 3

  # pack top-level frame
  pack $upperframe $lowerframe -side top -padx 2 -pady 3 -fill both

  wm minsize $top 685 430
  wm maxsize $top 685 430
  wm withdraw $top
  wm title $top "Edit work profile"
  BWidget::place $top 0 0 center
  wm geometry $top 685x430+430+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::Profile instproc addTask {} {
  my instvar leftlistbox rightlistbox
  set task [$rightlistbox selection get]
  if {$task != ""} {
    if {![$leftlistbox exists $task]} {
      $leftlistbox insert end $task \
	  -text "$task" \
	  -image [Bitmap::get task]
    }
    update idletasks
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You have to choose a task first." info Ok
  }
}

xoRET_GUI::Edit::Profile instproc removeTask {} {
  my instvar leftlistbox 
  set task [$leftlistbox selection get]
  if {$task != ""} {
    if {[$leftlistbox exists $task]} {
      $leftlistbox delete $task
    }
    update idletasks
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You have to choose a task first." info Ok
  }
}

xoRET_GUI::Edit::Profile instproc save {} {
  my instvar leftlistbox pm treeobj namee authore obj
  set name [string trim [$namee cget -text]]
  set author [string trim [$authore cget -text]]
  if {($name != "") && ($author != "")} {
    $obj author $author
    $pm clearTaskListOfWorkProfile "$name"
    set tasks [$leftlistbox items]
    if {$tasks != ""} {
      foreach t $tasks {
	$pm addTaskToWorkProfile "$t" "$name"
      }
    }    
    $treeobj redrawTree
    my destroy
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must enter a name, and an author in\
                                     order to save a work profile." info Ok
  }
}

Class xoRET_GUI::Edit::SSDRole -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::SSDRole instproc init args {
  next
  my instvar top pm treeobj obj leftlistbox upperrightlistbox middlerightlistbox lowerrightlistbox 
  # left frame
  set ltf [TitleFrame $top.ltf -text "Available Roles" -ipad 5]
  set f  [$ltf getframe] 
  set sw [ScrolledWindow $f.sw]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 20 \
		       -highlightthickness 0 \
		       -background white \
		       -selectmode single \
		       -multicolumn false]
  foreach r [lsort -dictionary [$pm getRoleList]] {
    $leftlistbox insert end [$r name] \
	-text "[$r name]" \
	-image [Bitmap::get facemask] 
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes

  # right frame
  set rtopf [frame $top.rtopf]
  set upperrighttitleframe [TitleFrame $rtopf.tf1 -text "Directly Mutual Exclusive Roles" -ipad 5]
  set f [$upperrighttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set upperrightlistbox [ListBox::create $sw.lb -height 4 -width 20 \
			     -highlightthickness 0 \
			     -background white \
			     -selectmode single \
			     -multicolumn false]
  set dmer [$obj getDirectSSDRoleConstraints]
  if {$dmer != ""} {
    foreach r [lsort -dictionary $dmer] {
      $upperrightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -image [Bitmap::get facemask] 
    }
  }
  $sw setwidget $upperrightlistbox
  pack $sw -fill both -expand yes

  set middlerighttitleframe [TitleFrame $rtopf.tf2 -text "Transitive SSD Role Constraints" -ipad 5]
  set f [$middlerighttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set middlerightlistbox [ListBox::create $sw.lb -height 4 -width 20 \
			      -highlightthickness 0 \
			      -background white \
			      -selectmode none \
			      -multicolumn false]
  set tssdrc [$obj getTransitiveSSDRoleConstraints]
  if {$tssdrc != ""} {
    foreach r [lsort -dictionary $tssdrc] {
      $middlerightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask] 
    }
  }
  $sw setwidget $middlerightlistbox
  pack $sw -fill both -expand yes

  set lowerrighttitleframe [TitleFrame $rtopf.tf3 -text "Inherited SSD Role Constraints" -ipad 5]
  set f [$lowerrighttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set lowerrightlistbox [ListBox::create $sw.lb -height 4 -width 20 \
			     -highlightthickness 0 \
			     -background white \
			     -selectmode none \
			     -multicolumn false]
  set issdc [$obj getInheritedSSDRoleConstraints]
  if {$issdc != ""} {
    foreach r [lsort -dictionary $issdc] {
      $lowerrightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask] 
    }
  }
  $sw setwidget $lowerrightlistbox
  pack $sw -fill both -expand yes

  pack $lowerrighttitleframe $middlerighttitleframe $upperrighttitleframe -side bottom -fill both -expand yes

  # button frame
  set bf  [TitleFrame $top.bf -text "Options"]
  set f [$bf getframe]
  set assignbutton  [Button $f.assignbutton -text "Set SSD Constraint" -width 17 \
			 -command "[self] setConstraint"]
  set revokebutton  [Button $f.revokebutton -text "Unset SSD Constraint" -width 17 \
			 -command "[self] unsetConstraint"]
  set placeholder [frame $f.ph -height 150]
  set sep [Separator $f.sep -orient horizontal]
  set close [Button $f.close -text "Close" -width 17 -command "$treeobj redrawTree; [self] destroy"]
  pack $close -side bottom -pady 4
  pack $sep -side bottom -fill x -pady 5
  pack $placeholder $revokebutton $assignbutton -side bottom -pady 15

  # pack toplevel-frame
  pack $ltf $bf $rtopf -side left -fill both -padx 1 -pady 3 -expand yes

  wm minsize $top 650 400
  wm withdraw $top
  wm title $top "SSD Role Constraint Management for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 650x400+330+320
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::SSDRole instproc setConstraint {} {
  my instvar pm obj leftlistbox upperrightlistbox lowerrightlistbox middlerightlistbox
  set role [$obj name]
  set mutlexcl [$leftlistbox selection get]
  set success [$pm setSSDRoleConstraint $role $mutlexcl]
  if {$success} {
    $upperrightlistbox insert end $mutlexcl \
	-text "$mutlexcl" \
	-image [Bitmap::get facemask]
  }
  $middlerightlistbox delete [$middlerightlistbox items]
  set tssdrc [$obj getTransitiveSSDRoleConstraints]
  if {$tssdrc != ""} {
    foreach r [lsort -dictionary $tssdrc] {
      $middlerightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask] 
    }
  }
  $lowerrightlistbox delete [$lowerrightlistbox items]
  set issdc [$obj getInheritedSSDRoleConstraints]
  if {$issdc != ""} {
    foreach r [lsort -dictionary $issdc] {
      $lowerrightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask] 
    }
  }
  update idletasks
}

xoRET_GUI::Edit::SSDRole instproc unsetConstraint {} {
  my instvar pm obj upperrightlistbox middlerightlistbox lowerrightlistbox
  set role [$obj name]
  set mutlexcl [$upperrightlistbox selection get]
  set success [$pm unsetSSDRoleConstraint $role $mutlexcl]
  if {$success} {
    $upperrightlistbox delete $mutlexcl
  }
  $middlerightlistbox delete [$middlerightlistbox items]
  set tssdrc [$obj getTransitiveSSDRoleConstraints]
  if {$tssdrc != ""} {
    foreach r [lsort -dictionary $tssdrc] {
      $middlerightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask] 
    }
  }
  $lowerrightlistbox delete [$lowerrightlistbox items]
  set issdc [$obj getInheritedSSDRoleConstraints]
  if {$issdc != ""} {
    foreach r [lsort -dictionary $issdc] {
      $lowerrightlistbox insert end [$r name]\
	  -text "[$r name]" \
	  -fill gray60 \
	  -image [Bitmap::get facemask] 
    }
  }
  update idletasks
}

Class xoRET_GUI::Edit::SSDPerm -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::SSDPerm instproc init args {
  next
  my instvar top pm treeobj obj leftlistbox rightlistbox
  
  # left frame
  set ltf [TitleFrame $top.ltf -text "Available Permissions" -ipad 5]
  set f  [$ltf getframe] 
  set sw [ScrolledWindow $f.sw]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 20 \
		       -highlightthickness 0 \
		       -background white \
		       -selectmode single \
		       -multicolumn false]
  foreach p [lsort -dictionary [$pm getPermissionList]] {
    $leftlistbox insert end [$p name] \
	-text "[$p name]" \
	-image [Bitmap::get key] 
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes

  # right frame
  set righttitleframe [TitleFrame $top.tf2 -text "Direct Mutual Exclusions" -ipad 5]
  set f [$righttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set rightlistbox [ListBox::create $sw.lb -height 10 -width 20 \
			-highlightthickness 0 \
			-background white \
			-selectmode single \
			-multicolumn false]
  set dmep [$obj getSSDPermConstraints]
  if {$dmep != ""} {
    foreach p [lsort -dictionary $dmep] {
      $rightlistbox insert end [$p name]\
	  -text "[$p name]" \
	  -image [Bitmap::get key] 
    }
  }
  $sw setwidget $rightlistbox
  pack $sw -fill both -expand yes

  # button frame
  set bf  [TitleFrame $top.bf -text "Options"]
  set f [$bf getframe]
  set assignbutton  [Button $f.assignbutton -text "Set SSD Constraint" -width 17 \
			 -command "[self] setConstraint"]
  set revokebutton  [Button $f.revokebutton -text "Unset SSD Constraint" -width 17 \
			 -command "[self] unsetConstraint"]
  set placeholder [frame $f.ph -height 80]
  set sep [Separator $f.sep -orient horizontal]
  set close [Button $f.close -text "Close" -width 17 -command "$treeobj redrawTree; [self] destroy"]
  pack $close -side bottom -pady 4
  pack $sep -side bottom -fill x -pady 5
  pack $placeholder $revokebutton $assignbutton -side bottom -pady 15

  # pack toplevel-frame
  pack $ltf $bf $righttitleframe -side left -fill both -padx 1 -pady 3 -expand yes

  wm minsize $top 580 320
  wm withdraw $top
  wm title $top "SSD Permission Constraint Management for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 580x320+355+350
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::SSDPerm instproc setConstraint {} {
  my instvar pm obj leftlistbox rightlistbox
  set perm [$obj name]
  set mutlexcl [$leftlistbox selection get]
  set success [$pm setSSDPermConstraint $perm $mutlexcl]
  if {$success} {
    if {![$rightlistbox exists $mutlexcl]} {
      $rightlistbox insert end $mutlexcl \
	  -text "$mutlexcl" \
	  -image [Bitmap::get key]
      update idletasks
    }
  }
}

xoRET_GUI::Edit::SSDPerm instproc unsetConstraint {} {
  my instvar pm obj rightlistbox
  set perm [$obj name]
  set mutlexcl [$rightlistbox selection get]
  set success [$pm unsetSSDPermConstraint $perm $mutlexcl]
  if {$success} {
    $rightlistbox delete $mutlexcl
    update idletasks
  }
}

Class xoRET_GUI::Edit::RoleCard -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::RoleCard instproc init args {
  next
  my instvar top pm treeobj obj mincardspin maxcardspin

  # upper frame
  set utf [TitleFrame $top.utf -text "Minimum Subject Cardinality" -ipad 5]
  set f  [$utf getframe]
  set cframe [frame $f.cframe]
  set mincardspin [SpinBox $cframe.spin -range {1 100 1} \
		       -helptext "Minimal number of subjects [$obj name]\
                                  must be directly assigned to."]
  set minlabel [Label $cframe.label -text "Minimum Cardinality:"]
  pack $minlabel $mincardspin -side left -fill x -padx 3 -pady 3 -expand yes
  set bframe [frame $f.bframe]
  set setminbut [Button $bframe.setminbut -text "Set Minimum Cardinality" -width 22 \
		     -command "[self] setMin"]
  set unsetminbut [Button $bframe.unsetminbut -text "Unset Minimum Cardinality" -width 22 \
		     -command "[self] unsetMin"]
  pack $setminbut $unsetminbut -side left -padx 3 -pady 3 -expand yes
  pack $bframe -side bottom -fill both -padx 2 -pady 2 -expand yes
  set sep [Separator $f.sep -orient horizontal]
  pack $sep -side bottom -fill x -pady 3
  pack $cframe -side bottom -fill both -padx 3 -pady 3 -expand yes

  # lower frame
  set ltf [TitleFrame $top.ltf -text "Maximum Subject Cardinality" -ipad 5]
  set f  [$ltf getframe]
  set cframe [frame $f.cframe]
  set maxcardspin [SpinBox $cframe.spin -range {1 100 1} \
		       -helptext "Maximum number of subjects [$obj name]\
                                  can be directly assigned to."]
  set maxlabel [Label $cframe.label -text "Maximum Cardinality:"]
  pack $maxlabel $maxcardspin -side left -fill x -padx 3 -pady 3 -expand yes
  set bframe [frame $f.bframe]
  set setmaxbut [Button $bframe.setmaxbut -text "Set Maximum Cardinality" -width 22 \
		     -command "[self] setMax"]
  set unsetmaxbut [Button $bframe.unsetmaxbut -text "Unset Maximum Cardinality" -width 22 \
		     -command "[self] unsetMax"]
  pack $setmaxbut $unsetmaxbut -side left -padx 3 -pady 3 -expand yes
  pack $bframe -side bottom -fill both -padx 2 -pady 2 -expand yes
  set sep [Separator $f.sep -orient horizontal]
  pack $sep -side bottom -fill x -pady 3
  pack $cframe -side bottom -fill both -padx 3 -pady 3 -expand yes

  set sep [Separator $top.sep -orient horizontal]
  set close [Button $top.close -text "Close" -width 30 -command "$treeobj redrawTree; [self] destroy"]
  pack $close -side bottom -pady 3 -expand yes
  pack $sep -side bottom -fill x -pady 3 -expand yes
  pack $ltf $utf -side bottom -pady 5 -expand yes
  
  set max [$pm getRoleMaxCardinality [$obj name]]
  set min [$pm getRoleMinCardinality [$obj name]]
  if {$max != -1} {
    $maxcardspin setvalue @[expr $max - 1]
  } else { 
    $maxcardspin configure -text ""
  }
  if {$min != -1} {
    $mincardspin setvalue @[expr $min - 1]
  } else {
    $mincardspin configure -text ""
  }

  wm minsize $top 465 290
  wm maxsize $top 750 290
  wm withdraw $top
  wm title $top "Cardinality Constraints for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 465x290+420+350
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::RoleCard instproc setMin {} {
  my instvar pm obj mincardspin
  set role [$obj name]
  set min [string trim [$mincardspin cget -text]]
  if {$min != ""} {
    $pm setRoleMinCardinality $role $min
  } else {
    xoRBAC_GUI::Dialog::MsgDialog md "You must define a value prior to\
                                      setting the cardinality." info Ok
  }
}

xoRET_GUI::Edit::RoleCard instproc unsetMin {} {
  my instvar pm obj mincardspin
  set role [$obj name]
  $pm unsetRoleMinCardinality $role
  $mincardspin configure -text ""
  update idletasks
}

xoRET_GUI::Edit::RoleCard instproc setMax {} {
  my instvar pm obj maxcardspin
  set role [$obj name]
  set max [string trim [$maxcardspin cget -text]]
  if {$max != ""} {
    $pm setRoleMaxCardinality $role $max
  } else {
    xoRBAC_GUI::Dialog::MsgDialog md "You must define a value prior to\
                                      setting the cardinality." info Ok
  }
}

xoRET_GUI::Edit::RoleCard instproc unsetMax {} {
  my instvar pm obj maxcardspin
  set role [$obj name]
  $pm unsetRoleMaxCardinality $role
  $maxcardspin configure -text ""
  update idletasks
}

Class xoRET_GUI::Edit::PermCard -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::PermCard instproc init args {
  next
  my instvar top pm treeobj obj mincardspin maxcardspin

  # upper frame
  set utf [TitleFrame $top.utf -text "Minimum Owner Cardinality" -ipad 5]
  set f  [$utf getframe]
  set cframe [frame $f.cframe]
  set mincardspin [SpinBox $cframe.spin -range {1 100 1} \
		       -helptext "Minimal number of roles [$obj name]\
                                  must be directly assigned to."]
  set minlabel [Label $cframe.label -text "Minimum Cardinality:"]
  pack $minlabel $mincardspin -side left -fill x -padx 3 -pady 3 -expand yes
  set bframe [frame $f.bframe]
  set setminbut [Button $bframe.setminbut -text "Set Minimum Cardinality" -width 22 \
		     -command "[self] setMin"]
  set unsetminbut [Button $bframe.unsetminbut -text "Unset Minimum Cardinality" -width 22 \
		     -command "[self] unsetMin"]
  pack $setminbut $unsetminbut -side left -padx 3 -pady 3 -expand yes
  pack $bframe -side bottom -fill both -padx 2 -pady 2 -expand yes
  set sep [Separator $f.sep -orient horizontal]
  pack $sep -side bottom -fill x -pady 3
  pack $cframe -side bottom -fill both -padx 3 -pady 3 -expand yes

  # lower frame
  set ltf [TitleFrame $top.ltf -text "Maximum Owner Cardinality" -ipad 5]
  set f  [$ltf getframe]
  set cframe [frame $f.cframe]
  set maxcardspin [SpinBox $cframe.spin -range {1 100 1} \
		       -helptext "Maximum number of roles [$obj name]\
                                  can be directly assigned to."]
  set maxlabel [Label $cframe.label -text "Maximum Cardinality:"]
  pack $maxlabel $maxcardspin -side left -fill x -padx 3 -pady 3 -expand yes
  set bframe [frame $f.bframe]
  set setmaxbut [Button $bframe.setmaxbut -text "Set Maximum Cardinality" -width 22 \
		     -command "[self] setMax"]
  set unsetmaxbut [Button $bframe.unsetmaxbut -text "Unset Maximum Cardinality" -width 22 \
		     -command "[self] unsetMax"]
  pack $setmaxbut $unsetmaxbut -side left -padx 3 -pady 3 -expand yes
  pack $bframe -side bottom -fill both -padx 2 -pady 2 -expand yes
  set sep [Separator $f.sep -orient horizontal]
  pack $sep -side bottom -fill x -pady 3
  pack $cframe -side bottom -fill both -padx 3 -pady 3 -expand yes

  set sep [Separator $top.sep -orient horizontal]
  set close [Button $top.close -text "Close" -width 30 \
		 -command "$treeobj redrawTree; [self] destroy"]
  pack $close -side bottom -pady 3 -expand yes
  pack $sep -side bottom -fill x -pady 3 -expand yes
  pack $ltf $utf -side bottom -pady 5 -expand yes

  set max [$pm getPermMaxCardinality [$obj name]]
  set min [$pm getPermMinCardinality [$obj name]]
  if {$max != -1} {
    $maxcardspin setvalue @[expr $max - 1]
  } else { 
    $maxcardspin configure -text ""
  }
  if {$min != -1} {
    $mincardspin setvalue @[expr $min - 1]
  } else {
    $mincardspin configure -text ""
  }

  wm minsize $top 465 290
  wm maxsize $top 750 290
  wm withdraw $top
  wm title $top "Cardinality Constraints for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 465x290+420+350
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::PermCard instproc setMin {} {
  my instvar pm obj mincardspin
  set perm [$obj name]
  set min [string trim [$mincardspin cget -text]]
  if {$min != ""} {
    $pm setPermMinCardinality $perm $min
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must define a value prior to\
                                      setting the cardinality." info Ok
  }
}

xoRET_GUI::Edit::PermCard instproc unsetMin {} {
  my instvar pm obj mincardspin
  set perm [$obj name]
  $pm unsetPermMinCardinality $perm
  $mincardspin configure -text ""
  update idletasks
}

xoRET_GUI::Edit::PermCard instproc setMax {} {
  my instvar pm obj maxcardspin
  set perm [$obj name]
  set max [string trim [$maxcardspin cget -text]]
  if {$max != ""} {
    $pm setPermMaxCardinality $perm $max
  } else {
    xoRET_GUI::Dialog::MsgDialog md "You must define a value prior to\
                                      setting the cardinality." info Ok
  }
}

xoRET_GUI::Edit::PermCard instproc unsetMax {} {
  my instvar pm obj maxcardspin
  set perm [$obj name]
  $pm unsetPermMaxCardinality $perm
  $maxcardspin configure -text ""
  update idletasks
}

Class xoRET_GUI::Edit::PermCCMgmt -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::PermCCMgmt instproc init args {
  next
  my instvar top pm treeobj obj leftlistbox rightlistbox
  
  # left frame
  set ltf [TitleFrame $top.ltf -text "Available Context Constraints" -ipad 5]
  set f  [$ltf getframe] 
  set sw [ScrolledWindow $f.sw]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 20 \
		       -highlightthickness 0 \
		       -background white \
		       -selectmode single \
		       -multicolumn false]
  set cclist [$pm getContextConstraintList]
  if {$cclist != ""} {
    foreach cc [lsort -dictionary $cclist] {
      $leftlistbox insert end [$cc name] \
	  -text "[$cc name]" \
	  -image [Bitmap::get constraint] 
    }
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes

  # right frame
  set righttitleframe [TitleFrame $top.tf2 -text "Linked Context Constraints" -ipad 5]
  set f [$righttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set rightlistbox [ListBox::create $sw.lb -height 10 -width 20 \
			-highlightthickness 0 \
			-background white \
			-selectmode single \
			-multicolumn false]
  set ccs [$obj getContextConstraints]
  if {$ccs != ""} {
    foreach cc [lsort -dictionary $ccs] {
      $rightlistbox insert end [$cc name]\
	  -text "[$cc name]" \
	  -image [Bitmap::get constraint] 
    }
  }
  $sw setwidget $rightlistbox
  pack $sw -fill both -expand yes

  # button frame
  set bf  [TitleFrame $top.bf -text "Options"]
  set f [$bf getframe]
  set linkbutton  [Button $f.linkbutton -text "Link Context Constraint" -width 22 \
			 -command "[self] linkConstraint"]
  set unlinkbutton  [Button $f.unlinkbutton -text "Unlink Context Constraint" -width 22 \
			 -command "[self] unlinkConstraint"]
  set placeholder [frame $f.ph -height 80]
  set sep [Separator $f.sep -orient horizontal]
  set close [Button $f.close -text "Close" -width 22 -command "$treeobj redrawTree; [self] destroy"]
  pack $close -side bottom -pady 4
  pack $sep -side bottom -fill x -pady 5
  pack $placeholder $unlinkbutton $linkbutton -side bottom -pady 15

  # pack toplevel-frame
  pack $ltf $bf $righttitleframe -side left -fill both -padx 1 -pady 3 -expand yes

  wm minsize $top 640 320
  wm withdraw $top
  wm title $top "Context Constraint Management for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 640x320+325+350
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::PermCCMgmt instproc linkConstraint {} {
  my instvar pm obj leftlistbox rightlistbox
  set perm [$obj name]
  set cc [$leftlistbox selection get]
  set success [$pm linkContextConstraintToPerm $cc $perm]
  if {$success} {
    $rightlistbox insert end $cc \
	-text "$cc" \
	-image [Bitmap::get constraint]
    update idletasks
  }
}

xoRET_GUI::Edit::PermCCMgmt instproc unlinkConstraint {} {
  my instvar pm obj rightlistbox
  set perm [$obj name]
  set cc [$rightlistbox selection get]
  set success [$pm unlinkContextConstraintFromPerm $cc $perm]
  if {$success} {
    $rightlistbox delete $cc
    update idletasks
  }
}

Class xoRET_GUI::Edit::CCCondMgmt -superclass xoRET_GUI::Edit

xoRET_GUI::Edit::CCCondMgmt instproc init args {
  next
  my instvar top pm treeobj obj leftlistbox rightlistbox
  # left frame
  set ltf [TitleFrame $top.ltf -text "Available Conditions" -ipad 5]
  set f  [$ltf getframe] 
  set sw [ScrolledWindow $f.sw]
  set leftlistbox [ListBox::create $sw.lb -height 10 -width 20 \
		       -highlightthickness 0 \
		       -background white \
		       -selectmode single \
		       -multicolumn false]
  set condlist [$pm getConditionList]
  if {$condlist != ""} {
    foreach cond [lsort -dictionary $condlist] {
      $leftlistbox insert end [$cond name] \
	  -text "[$cond name]" \
	  -image [Bitmap::get condition] 
    }
  }
  $sw setwidget $leftlistbox
  pack $sw -fill both -expand yes

  # right frame
  set righttitleframe [TitleFrame $top.tf2 -text "Linked Conditions" -ipad 5]
  set f [$righttitleframe getframe]
  set sw [ScrolledWindow $f.sw]
  set rightlistbox [ListBox::create $sw.lb -height 10 -width 20 \
			-highlightthickness 0 \
			-background white \
			-selectmode single \
			-multicolumn false]
  set condlist [$obj getAllConditions]
  if {$condlist != ""} {
    foreach cond [lsort -dictionary $condlist] {
      $rightlistbox insert end [$cond name]\
	  -text "[$cond name]" \
	  -image [Bitmap::get condition] 
    }
  }
  $sw setwidget $rightlistbox
  pack $sw -fill both -expand yes

  # button frame
  set bf  [TitleFrame $top.bf -text "Options"]
  set f [$bf getframe]
  set linkbutton  [Button $f.linkbutton -text "Link Condition" -width 22 \
			 -command "[self] linkCondition"]
  set unlinkbutton  [Button $f.unlinkbutton -text "Unlink Condition" -width 22 \
			 -command "[self] unlinkCondition"]
  set placeholder [frame $f.ph -height 80]
  set sep [Separator $f.sep -orient horizontal]
  set close [Button $f.close -text "Close" -width 22 -command "$treeobj redrawTree; [self] destroy"]
  pack $close -side bottom -pady 4
  pack $sep -side bottom -fill x -pady 5
  pack $placeholder $unlinkbutton $linkbutton -side bottom -pady 15

  # pack toplevel-frame
  pack $ltf $bf $righttitleframe -side left -fill both -padx 1 -pady 3 -expand yes

  wm minsize $top 640 320
  wm withdraw $top
  wm title $top "Condition Management for $obj"

  BWidget::place $top 0 0 center
  wm geometry $top 640x320+325+350
  wm deiconify $top
  raise $top
  focus -force $top
  update idletasks
}

xoRET_GUI::Edit::CCCondMgmt instproc linkCondition {} {
  my instvar pm obj leftlistbox rightlistbox
  set cc [$obj name]
  set cond [$leftlistbox selection get]
  set success [$pm linkConditionToContextConstraint $cond $cc]
  if {$success} {
    $rightlistbox insert end $cond \
	-text "$cond" \
	-image [Bitmap::get condition]
    update idletasks
  }
}

xoRET_GUI::Edit::CCCondMgmt instproc unlinkCondition {} {
  my instvar pm obj rightlistbox
  set cc [$obj name]
  set cond [$rightlistbox selection get]
  set success [$pm unlinkConditionFromContextConstraint $cond $cc]
  if {$success} {
    $rightlistbox delete $cond
    update idletasks
  }
}
